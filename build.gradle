buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
    }
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

ext.early = true
apply from: 'project.gradle'

project.ext.package = project.ext.group + '.' + project.ext.projectName.toLowerCase()

if (project.ext.useElytraVersionFormat) {
    def branch;
    if (System.env.BRANCH_NAME) {
        // Jenkins support
        branch = System.env.BRANCH_NAME;
        branch = branch.substring(branch.lastIndexOf('/') + 1);
    } else {
        branch = 'git rev-parse --abbrev-ref HEAD'.execute().in.text.trim();
    }
    if (branch == "HEAD") {
        branch = 'git rev-parse --short HEAD'.execute().in.text.trim();
    }
    def commits = 'git rev-list --count HEAD'.execute().in.text.trim();
    def dirty = !'git diff-index HEAD'.execute().in.text.trim().isEmpty();
    version = branch + '-' + project.ext.version + '.' + commits + (dirty ? '-dirty' : '');
} else {
    version = project.ext.version;
}

group = project.ext.group
archivesBaseName = project.ext.projectName

minecraft {
    mappings channel: 'snapshot', version: '20190222-1.13.1'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                mainMod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                mainMod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.ext.forge}"
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'https://repo.tridevmc.com/'
    }
}

def needsShadow = !project.ext.compoundModules.isEmpty()

if (needsShadow) {
    apply plugin: 'com.github.johnrengelman.shadow'

    shadowJar {
        classifier = ''
        relocate 'com.tridevmc.compound', project.ext.package + '.repackage.com.tridevmc.compound'
    }

    dependencies {
        for (String module : project.ext.compoundModules) {
            shadow 'com.tridevmc.compound:compound' + '-' + module + ':' + project.ext.compoundVersion
            compile 'com.tridevmc.compound:compound' + '-' + module + ':' + project.ext.compoundVersion
        }
    }
}

ext.early = false
apply from: 'project.gradle'

if (file('private.gradle').exists()) {
    apply plugin: 'maven-publish'
    apply from: 'private.gradle'
}