buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
    }
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'


ext.early = true
apply from: 'project.gradle'

if (project.ext.language == 'kotlin') {
    apply plugin: 'kotlin'
} else if (project.ext.language == 'scala') {
    apply plugin: 'scala'
}

project.ext.package = project.ext.group + '.' + project.ext.projectName.toLowerCase()

if (project.ext.useElytraVersionFormat) {
    def branch;
    if (System.env.BRANCH_NAME) {
        // Jenkins support
        branch = System.env.BRANCH_NAME;
        branch = branch.substring(branch.lastIndexOf('/') + 1);
    } else {
        branch = 'git rev-parse --abbrev-ref HEAD'.execute().in.text.trim();
    }
    if (branch == "HEAD") {
        branch = 'git rev-parse --short HEAD'.execute().in.text.trim();
    }
    def commits = 'git rev-list --count HEAD'.execute().in.text.trim();
    def dirty = !'git diff-index HEAD'.execute().in.text.trim().isEmpty();
    version = branch + '-' + project.ext.version + '.' + commits + (dirty ? '-dirty' : '');
} else {
    version = project.ext.version;
}
println()
println("Elytra Project Skeleton v1.1.2")
println("https://github.com/elytra/Skeleton")
println()
println("Project Name: " + project.ext.projectName)
println("Version: " + version)
println()
println("Package: " + project.ext.package)
println()
if (!project.ext.concreteModules.isEmpty()) {
    println("Concrete Version: " + project.ext.concreteVersion)
}
if (project.ext.coremod && project.ext.miniVersion) {
    println("Mini Version: " + project.ext.miniVersion);
}
println("Forge Version: " + project.ext.forge)
println("Language: " + project.ext.language.charAt(0).toUpperCase() + project.ext.language.substring(1))
println()

project.ext.priv = parseConfig(file('private.properties'))

group = project.ext.group
archivesBaseName = project.ext.projectName

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20180921-1.13'

    //replaceIn 'src/main/java/' + project.ext.package.replace('.', '/') + '/' + project.ext.projectName + '.java'
    //replace '@VERSION@', project.version
    
    // default run configurations.
    // these can be tweaked, removed, or duplicated as needed.
    runs {
        client = {
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            workingDirectory project.file('run').canonicalPath
        }
    }
}

dependencies {
    minecraft "net.minecraftforge.test:forge:${project.ext.forge}"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', '1.13'

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META_INF/mods.toml'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion': '1.13'
    }

    // copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META_INF/mods.toml'
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'https://repo.elytradev.com/'
    }
    if (project.ext.language == 'kotlin') {
        maven {
            url 'http://maven.shadowfacts.net/'
        }
    }
}

def needsShadow = !project.ext.concreteModules.isEmpty() || project.ext.miniVersion

if (needsShadow) {
    apply plugin: 'com.github.johnrengelman.shadow'

    jar {
        classifier = 'slim'
    }

    shadowJar {
        classifier = ''
        relocate 'com.elytradev.concrete', project.ext.package + '.repackage.com.elytradev.concrete'
        relocate 'com.elytradev.mini', project.ext.package + '.asm.repackage.com.elytradev.mini'
        configurations = [project.configurations.shadow]
    }

    //reobf {
    //    shadowJar { mappingType = 'SEARGE' }
    //}

    //tasks.reobfJar.doLast {
    //    file('build/libs/' + archivesBaseName + '-' + version + '-slim.jar').delete()
    //}

    //tasks.build.dependsOn reobfShadowJar

    artifacts {
        archives shadowJar
    }

    dependencies {
        for (String module : project.ext.concreteModules) {
            shadow 'com.elytradev:concrete:' + project.ext.concreteVersion + ':' + module
            compile 'com.elytradev:concrete:' + project.ext.concreteVersion + ':' + module
        }
        if (project.ext.miniVersion) {
            shadow 'com.elytradev:mini:' + project.ext.miniVersion
            compile 'com.elytradev:mini:' + project.ext.miniVersion
        }
    }
}

ext.early = false
apply from: 'project.gradle'

if (project.ext.language == 'kotlin') {
    dependencies {
        compile 'net.shadowfacts:Forgelin:1.5.1'
    }
}

if (file('private.gradle').exists()) {
    apply plugin: 'maven'

    configurations {
        deploy
    }

    dependencies {
        deploy 'org.apache.maven.wagon:wagon-ssh:2.10'
    }

    apply from: 'private.gradle'
}


if (project.ext.language == 'kotlin') {
    sourceSets.main.java.srcDirs += 'src/main/kotlin'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', '1.13'

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META_INF/mods.toml'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion': '1.13'
    }

    // copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META_INF/mods.toml'
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude '*.xcf'
        exclude '*.wav'
    }
}

def parseConfig(File config) {
    if (!config.exists()) return null
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}