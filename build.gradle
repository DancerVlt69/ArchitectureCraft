plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

ext.early = true
apply from: 'project.gradle'

project.ext.package = project.ext.group + '.' + project.ext.projectName.toLowerCase()

if (project.ext.useElytraVersionFormat) {
    def branch
    if (System.env.BRANCH_NAME) {
        // Jenkins support
        branch = System.env.BRANCH_NAME
        branch = branch.substring(branch.lastIndexOf('/') + 1)
    } else {
        branch = 'git rev-parse --abbrev-ref HEAD'.execute().in.text.trim()
    }
    if (branch == "HEAD") {
        branch = 'git rev-parse --short HEAD'.execute().in.text.trim()
    }
    def commits = 'git rev-list --count HEAD'.execute().in.text.trim()
    def dirty = !'git diff-index HEAD'.execute().in.text.trim().isEmpty()
    version = branch + '-' + project.ext.version + '.' + commits + (dirty ? '-dirty' : '')
} else {
    version = project.ext.version
}

group = project.ext.group
archivesBaseName = project.ext.projectName

ext {
    compoundClassesDir = file('build/compound')
}

configurations {
    nonModDep
    shade
}

repositories {
    maven { url = 'https://repo.tridevmc.com/' }
}

minecraft {
    mappings channel: project.ext.mappingsChannel, version: project.ext.mappingsVersion

    runs {
        client {
            environment "MOD_CLASSES", [
                    sourceSets.main.output.resourcesDir.absolutePath,
                    sourceSets.main.output.classesDirs.asPath,
                    project.compoundClassesDir.absolutePath
            ].join(File.pathSeparator)

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                mainMod {
                    source sourceSets.main
                }
            }
        }

        server {
            environment "MOD_CLASSES", [
                    sourceSets.main.output.resourcesDir.absolutePath,
                    sourceSets.main.output.classesDirs.asPath,
                    project.compoundClassesDir.absolutePath
            ].join(File.pathSeparator)

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                mainMod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.ext.forge}"
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

def needsShadow = !project.ext.compoundModules.isEmpty()

if (needsShadow) {
    dependencies {
        for (String module : project.ext.compoundModules) {
            def moduleIdentifier = 'com.tridevmc.compound:compound-' + module + ':' + project.ext.compoundVersion
            implementation(moduleIdentifier)
            shade(moduleIdentifier)
            nonModDep(moduleIdentifier)
        }
    }

    tasks.build.dependsOn shadowJar

    artifacts {
        archives shadowJar
    }

    task extractNonMod(type: Copy) {
        project.compoundClassesDir.delete()
        project.compoundClassesDir.mkdirs()
        from zipTree(project.configurations.nonModDep.find { it.name.startsWith("compound") })
        into project.compoundClassesDir
    }

    compileJava.dependsOn(extractNonMod)

    shadowJar {
        configurations = [project.configurations.shade]
        relocate 'com.tridevmc.compound', project.ext.projectPackage + '.com.tridevmc.compound'
    }
}

ext.early = false
apply from: 'project.gradle'

if (file('private.gradle').exists()) {
    apply plugin: 'maven-publish'
    apply from: 'private.gradle'
}